Refactored code:

```c
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* head;

struct Node* CreateNode() {
    struct Node* new = (struct Node*)malloc(sizeof(struct Node));
    return new;
}

void Insert(int val) {
    struct Node* NewNode = CreateNode();
    NewNode->data = val;
    NewNode->next = head;
    head = NewNode;
}

void View() {
    struct Node* temp = head;
    printf("Todo List:\n");
    while (temp != NULL) {
        printf("%d\n", temp->data);
        temp = temp->next;
    }
}

int main() {
    head = NULL;
    int choice, value;
    while (1) {
        printf("\n1. Add task\n");
        printf("2. View tasks\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter task: ");
                scanf("%d", &value);
                Insert(value);
                break;
            case 2:
                View();
                break;
            case 3:
                printf("Exiting...\n");
                exit(0);
            default:
                printf("Invalid choice\n");
        }
    }
    return 0;
}
```

Test cases for the refactored code:

```c
#include <stdio.h>
#include <assert.h>

void test_Insert() {
    head = NULL;
    Insert(1);
    Insert(2);
    Insert(3);
    assert(head->data == 3);
    assert(head->next->data == 2);
    assert(head->next->next->data == 1);
    assert(head->next->next->next == NULL);
}

void test_View() {
    head = NULL;
    Insert(1);
    Insert(2);
    Insert(3);
    printf("Expected Output:\n");
    printf("Todo List:\n");
    printf("3\n");
    printf("2\n");
    printf("1\n");
    printf("Actual Output:\n");
    View();
}

int main() {
    test_Insert();
    test_View();
    printf("All test cases pass\n");
    return 0;
}
```